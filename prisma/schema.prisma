// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                String   @id
  name              String
  email             String   @unique
  password_hash     String
  logo_url          String
  phone             String
  profile_completed Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  Pets Pet[]

  Adoptions Adoption[]

  OrganizationAddress OrganizationAddress[]

  @@map("organizations")
}

model OrganizationAddress {
  id           String   @id
  zipcode      String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  latitude     Decimal  @default(0)
  longitude    Decimal  @default(0)
  complement   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  organization_id String
  Organization    Organization @relation(fields: [organization_id], references: [id])

  Pet Pet[]

  @@index([city])
  @@map("organization_addresses")
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

enum PetEnergyLevel {
  LOW
  MODERATE
  MEDIUM
  HIGH
}

enum PetEnvironmentSize {
  SMALL
  MEDIUM
  LARGE
}

enum PetAdoptionStatus {
  PENDING
  ADOPTED
  NOT_ADOPTED
}

model Pet {
  id               String             @id
  name             String
  about            String
  adoption_status  PetAdoptionStatus  @default(NOT_ADOPTED)
  size             PetSize
  energy_level     PetEnergyLevel
  environment_size PetEnvironmentSize
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt

  organization_id String
  Organization    Organization @relation(fields: [organization_id], references: [id])

  organization_address_id String
  OrganizationAddress     OrganizationAddress @relation(fields: [organization_address_id], references: [id])

  Adoptions Adoption[]

  @@map("pets")
}

model Adoption {
  id            String    @id
  adopter_email String
  adopter_name  String
  adopter_phone String
  adoption_code String    @unique @default(uuid())
  created_at    DateTime  @default(now())
  expires_at    DateTime
  confirmed_at  DateTime?

  pet_id String
  Pet    Pet    @relation(fields: [pet_id], references: [id])

  organization_id String
  Organization    Organization @relation(fields: [organization_id], references: [id])

  @@map("adoptions")
}
